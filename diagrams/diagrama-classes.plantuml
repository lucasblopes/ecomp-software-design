@startuml
class Activity {
    - int durationMinutes
    - String location
    - List<String> participants
    - String goal
    - String summary
    + Activity()
    + Activity(int, String, List<String>, String, String)
    + String getName()
    + void setName(String)
    + int getDurationMinutes()
    + void setDurationMinutes(int)
    + String getLocation()
    + void setLocation(String)
    + List<String> getParticipants()
    + void setParticipants(List<String>)
    + List<Invoices> getInvoices()
    + void setInvoices(List<Invoices>)
    + String getGoal()
    + void setGoal(String)
    + String getSummary()
    + void setSummary(String)
    + void addInvoice(Invoice)
    + String toString()
}

class Dev {
    - String proj
    - final Member member
    - Map<String, Integer> issues
    + Dev(Member, String)
    + void addIssue(String, int)
    + void setIssues(Map<String, Integer> issues)
    + Member getMember()
    + Map<String, Integer> getIssues()
}

class Member {
    - String name
    - String cpf
    - String rg
    - String email
    - String phone
    - String position
    - String department
    - String course
    - LocalDate birthDate
    + static MemberBuilder builder()
    + void printMember()
    + List<String> validateFields()
    + String getName()
    + String getCPF()
    + String getEmail()
    + String getPhone()
    + String getPosition()
    + String getDepartment()
    + String getCourse()
    + LocalDate getBirthDate()
}

class MemberBuilder {
    - String name
    - String cpf
    - String rg
    - String email
    - String phone
    - String position
    - String department
    - String course
    - LocalDate birthDate
    + Member build()
    + MemberBuilder name(String)
    + MemberBuilder cpf(String)
    + MemberBuilder rg(String)
    + MemberBuilder email(String)
    + MemberBuilder phone(String)
    + MemberBuilder position(String)
    + MemberBuilder department(String)
    + MemberBuilder course(String)
    + MemberBuilder birthDate(LocalDate)
}

class Project {
    - String title
    - String client
    - LocalDate startDate
    - LocalDate deliveryDeadline
    - String description
    - String contractPDF
    - List<Stage> stages
    - List<Dev> devs
    - List<Invoice> invoices;
    + static ProjectBuilder builder()
    + String getTitle()
    + String getClient()
    + LocalDate getStartDate()
    + LocalDate getDeliveryDeadline()
    + String getDescription()
    + String getContractPDF()
    + List<Stage> getStages()
    + List<Dev> getDevs()
    + List<Invoices> getInvoices()
    + void addDev(Dev)
    + void addStage(Stage)
    + void addInvoice(Invoice)
    + List<String> validateFields()
    + String toString()
}

class ProjectBuilder {
    - String title
    - String client
    - LocalDate startDate
    - LocalDate deliveryDeadline
    - String description
    - String contractPDF
    - List<Stage> stages
    - List<Dev> devs
    - List<Invoice> invoices;
    + ProjectBuilder()
    + ProjectBuilder title(String)
    + ProjectBuilder client(String)
    + ProjectBuilder startDate(LocalDate)
    + ProjectBuilder deliveryDeadline(LocalDate)
    + ProjectBuilder description(String)
    + ProjectBuilder contractPDF(String)
    + ProjectBuilder stages(List<Stage>)
    + ProjectBuilder devs(List<Dev> devs)
    + ProjectBuilder invoices(List<Invoice> invoices)
    + Project build()
}

class Stage {
    - String schedule
    - String status
    + Stage(String, String)
    + static StageBuilder builder()
    + String getSchedule()
    + String getStatus()
    + void setStatus(String)
    + void setSchedule(String)
    + List<String> validateFields()
}

class StageBuilder {
    - String schedule
    - String status
    - StageBuilder()
    + Stage build()
    + StageBuilder schedule(String)
    + StageBuilder status(String)
}

class ActivityRepository {
    - List<Activity> activities
    + ActivityRepository()
    + void addActivity(Activity)
    + void setActivities(List<Activity>)
    + void removeActivity(Activity)
    + Optional<Activity> findActivity(String)
    + List<Activity> getActivities()
}

class DevRepository {
    - List<Dev> devs
    + DevRepository()
    + void addDev(Dev)
    + void setDevs(List<Dev>)
    + List<Dev> getDevs()
    + Optional<Dev> findDev(String)
}

class MemberRepository {
    - List<Member> members
    + void addMember(Member)
    + MemberRepository()
    + List<Member> getMembers()
    + void setMembers(List<Member>)
    + void removeMember(Member)
    + Optional<Member> findMemberByName(String name)
    + Optional<Member> findMemberByCPF(String)
}

class ProjectRepository {
    - List<Project> projects
    + void addProject(Project)
    + ProjectRepository()
    + List<Project> getProjects()
    + void setProjects(List<Project>)
    + void removeProject(Project)
    + Optional<Project> findProject(String)
}

class GenericView {
    - Scanner scanner
    + String getInput()
    + int getInputInt()
    + void showError()
    + void showSuccess()
    + void showConfirmation()
    + void showContinue()
    + void clearScreen()
}

class DevView {
    + void showManageScreen()
    + void showAddDevToProjectScreen()
    + void showAddIssueToDevScreen()
    + String getDevName()
    + String getProjName()
    + String getIssue()
    + int getHours()
}

class EcompView {
    + void showMenu()
}

class RegisterActivityView {
    + void showTitle()
    + String getName()
    + int getDurationMinutes()
    + String getLocation()
    + List<String> getParticipants()
    + String getGoal()
    + String getSummary()
    + void printActivity()
}

class RegisterMemberView {
    + void showMemberRegistrationScreen()
    + String getName()
    + String getCPF()
    + String getRG()
    + String getEmail()
    + String getPhone()
    + String getPosition()
    + String getDepartment()
    + String getCourse()
    + LocalDate getBirthDate()
    + void showTitle()
}

class RegisterProjectView {
    + void showProjectRegistrationScreen()
    + String getTitle()
    + String getClient()
}

class RegisterStageView {
    + void showProjects(ProjectRepository)
    + String selectProject()
}

class DevCtrl {
    - DevView view
    - ProjectRepository projRepo
    - MemberRepository memberRepo
    - DevRepository devRepo
    + void manage()
    + void addDevToProject()
    - void addDevToProject(String, Project)
    - void addDevToProject(String, String)
    - void addIssueToDev()
    - void addIssueToDev(String, String, int)
}

class EcompCtrl {
    - EcompView view
    - ProjectRepository projRepo
    - MemberRepository memberRepo
    - ActivityRepository activityRepo
    - DevRepository devRepo
    - RegisterProjectCtrl regProjCtrl
    - RegisterStageCtrl stageCtrl
    - RegisterActivityCtrl activityCtrl
    - RegisterInvoiceCtrl invoiceCtrl
    - RegisterMemberCtrl memberCtrl
    - GenerateReportCtrl genRepCtrl
    - DevCtrl devCtrl
    + EcompCtrl()
    + void start()
}

class RegisterActivityCtrl {
    - ActivityRepository activityRepo
    - MemberRepository memberRepo
    + RegisterActivityCtrl(ActivityRepository, MemberRepository)
    + void registerActivity()
}

class RegisterInvoiceCtrl {
    - RegisterInvoiceView view
    - ProjectRepository projectRepo
    - ActivityRepository activityRepo
    + RegisterInvoiceCtrl(ProjectRepository, ActivityRepository)
    + void registerInvoice()
}

class RegisterMemberCtrl {
    - RegisterMemberView view
    - MemberRepository memberRepo
    + void registerMember()
}

class RegisterProjectCtrl {
    - RegisterProjectView view
    - ProjectRepository projectRepo
    - DevCtrl devCtrl
    + RegisterProjectCtrl(ProjectRepository, DevCtrl)
    + void registerProject()
}

class RegisterStageCtrl {
    - RegisterStageView view
    - ProjectRepository projectRepo
    + RegisterStageCtrl(ProjectRepository)
    + void registerStage()
}

class Main {
    + void main(String[] args)
}

class GenerateReportCtrl {
    - ProjectRepository projectRepo
    - ActivityRepository activityRepo
    - GenerateReportView view
    + GenerateReportCtrl(ProjectRepository, ActivityRepository)
    + void generateReport()
    - String getProjectReportContent()
    - String getFinancialReportContent()
    - boolean saveReportToFile(String content, String filePath)
}

class RegisterInvoiceCtrl {
    - RegisterInvoiceView view
    - ProjectRepository projectRepo
    - ActivityRepository activityRepo
    + void registerInvoice()
}

class GenerateReportView {
    + void showTitle()
    + String getReportType()
    + String getReportDestination()
    + void displayReport(String reportContent)
    + void displayFileSaveResult(boolean success, String filePath)
    + void displayNotImplementedMessage()
}

class RegisterInvoiceView {
    + String showChoice()
    + boolean showProjects(ProjectRepository)
    + boolean showActivities(ActivityRepository)
    + String selectProject()
    + String selectActivity()
    + LocalDate getDate()
    + String getType()
    + Integer getValue()
    + void showTitle()
}

class Invoice {
    - LocalDate date
    - Integer value
    - String type
    + Invoice(LocalDate, Integer, String)
    + LocalDate getDate()
    + Integer getValue()
    + String getType()
    + void setDate(LocalDate)
    + void setValue(Integer)
    + void setType(String)
    + List<String> validateFields()
}

class DateUtil {
    + static LocalDate parseDate(String dateString)
}

class PathUtil {
    + static String getLastPartOfPath(String fullPath)
}

' Existing Relationships
Main --> EcompCtrl : "uses"
Main ..> EcompCtrl : <<local>>

RegisterInvoiceCtrl ..> RegisterInvoiceView : <<local>>

RegisterInvoiceView ..> ProjectRepository : <<parâmetro>>
RegisterInvoiceView ..> ActivityRepository : <<parâmetro>>
RegisterInvoiceView ..> DateUtil : <<local>>

Invoice ..> DateUtil : <<local>>

Project "1" *--> "0..*" Stage : "contains"
Project "1" *--> "0..*" Dev : "contains"

ActivityRepository "1" *--> "1..*" Activity : "manages"
DevRepository "1" *--> "1..*" Dev : "manages"
MemberRepository "1" *--> "1..*" Member : "manages"
ProjectRepository "1" *--> "1..*" Project : "manages"

GenericView <|-- DevView : "extends"
GenericView <|-- EcompView : "extends"
GenericView <|-- RegisterActivityView : "extends"
GenericView <|-- GenerateReportView : "extends"
GenericView <|-- RegisterInvoiceView : "extends"
GenericView <|-- RegisterMemberView : "extends"
GenericView <|-- RegisterProjectView : "extends"
GenericView <|-- RegisterStageView : "extends"

RegisterProjectView --> DateUtil : "uses"
RegisterProjectView --> PathUtil : "uses"

EcompCtrl *--> RegisterProjectCtrl : "manages"
EcompCtrl *--> RegisterStageCtrl : "manages"
EcompCtrl *--> RegisterActivityCtrl : "manages"
EcompCtrl *--> RegisterInvoiceCtrl : "manages"
EcompCtrl *--> RegisterMemberCtrl : "manages"
EcompCtrl *--> GenerateReportCtrl : "manages"
EcompCtrl *--> DevCtrl : "manages"
EcompCtrl *--> EcompView : "uses"

DevCtrl *--> DevRepository : "uses"
DevCtrl *--> ProjectRepository : "uses"
DevCtrl *--> MemberRepository : "uses" 
DevCtrl *--> DevView : "uses"

RegisterActivityCtrl *--> ActivityRepository : "uses"
RegisterActivityCtrl *--> MemberRepository : "uses"
RegisterActivityCtrl *--> RegisterActivityView : "uses"

RegisterMemberCtrl *--> MemberRepository : "uses"

RegisterProjectCtrl *--> ProjectRepository : "uses"
RegisterProjectCtrl *--> DevCtrl : "uses"

RegisterStageCtrl *--> ProjectRepository : "uses"

Project "1" *--> "0..*" Stage : "contains"
Project "1" *--> "0..*" Dev : "contains"

DevCtrl ..> Project : "<<local>>\n<<parâmetro>>"
DevCtrl ..> Member : "<<local>>"

RegisterProjectCtrl ..> Project : "<<local>>"
RegisterProjectCtrl ..> Dev : "<<local>>"

RegisterStageCtrl ..> Project : "<<local>>"
RegisterStageCtrl ..> Stage : "<<local>>"

RegisterActivityCtrl ..> Activity : "<<local>>"
RegisterActivityCtrl ..> Member: "<<local>>"

RegisterMemberCtrl ..> Member : "<<local>>"
MemberRepository ..> Member : "<<parâmetro>>"
DevRepository ..> Dev : "<<parâmetro>>"
ProjectRepository ..> Project : "<<parâmetro>>"
ActivityRepository ..> Activity : "<<parâmetro>>"

RegisterInvoiceCtrl *--> RegisterInvoiceView
RegisterInvoiceCtrl *--> ProjectRepository
RegisterInvoiceCtrl *--> ActivityRepository

RegisterInvoiceCtrl --> Invoice : "uses"
RegisterInvoiceCtrl --> Activity : "uses"
RegisterInvoiceCtrl --> Project : "uses"

RegisterInvoiceCtrl ..> Invoice : "<<local>>"
RegisterInvoiceCtrl ..> Activity : "<<local>>"
RegisterInvoiceCtrl ..> Project : "<<local>>"

GenerateReportCtrl *--> ProjectRepository : "uses"
GenerateReportCtrl *--> ActivityRepository : "uses"

GenerateReportCtrl --> Stage : "uses"
GenerateReportCtrl --> Dev : "uses" 
GenerateReportCtrl --> Project : "uses"
GenerateReportCtrl --> Activity : "uses"

GenerateReportCtrl ..> Stage : "<<local>>"
GenerateReportCtrl ..> Activity : "<<local>>"
GenerateReportCtrl ..> Project : "<<local>>"
GenerateReportCtrl ..> Dev : "<<local>>"
GenerateReportCtrl ..> Member : "<<local>>"

Project --> ProjectBuilder : "<<create>>"
ProjectBuilder --> Project : "<<creates>>"
ProjectBuilder "1" *--> "0..*" Stage : "manages"
ProjectBuilder "1" *--> "0..*" Dev : "manages"
ProjectBuilder "1" *--> "0..*" Invoice : "manages"

Stage --> StageBuilder : "<<create>>"
StageBuilder --> Stage : "<<create>>"

Member --> MemberBuilder : "<<create>>"
MemberBuilder --> Member : "<<create>>"

RegisterInvoiceView ..> ProjectRepository : "<<parâmetro>>"
RegisterInvoiceView ..> ActivityRepository : "<<parâmetro>>"

@enduml
